@page "/osc/{Name}"


@inject HttpClient HttpClient

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (_oSCControlSettings is null)
    {
        <MudText>Wird geladen...</MudText>
    }
    else
    {
        <PageTitle>@_oSCControlSettings.Name</PageTitle>

        <h1>@_oSCControlSettings.Name</h1>

        @foreach(var oscRow in _oSCControlSettings.Elements)
        {
            <MudGrid>
                @foreach(var oscCol in oscRow)
                {
                    string color = "#0099FF";
                    @if (_oSCControlSettings.Color is not null)
                        color = _oSCControlSettings.Color;
                    if (oscCol.Color is not null)
                        color = oscCol.Color;

                    <MudItem xs="@oscCol.Size">
                        @if(oscCol.Type == "fader")
                        {
                            <MudSlider T="float?" Size="Size.Large" Variant="Variant.Filled"
                                       Min="oscCol.Min" Max="oscCol.Max" Value="oscCol.DefaultValue"
                                       Step="oscCol.Steps" ValueChanged="(val) => ValueChanged(oscCol,(float?) val.Value)">
                                       @oscCol.Text @(oscCol.DefaultValue.HasValue ? (" : " + oscCol.DefaultValue) : "")
                                   </MudSlider>
                        }
                        else if (oscCol.Type == "number")
                        {
                            <MudNumericField T="float?" Label="@oscCol.Text" Variant="Variant.Outlined"
                                             Min="oscCol.Min" Max="oscCol.Max" Value="oscCol.DefaultValue" Step="oscCol.Steps"
                                             ValueChanged="(val) => ValueChanged(oscCol, (float?) val.Value)" />

                        }
                        else if(oscCol.Type == "text")
                        {
                            <MudText Align="Align.Center" GutterBottom="false" 
                            Typo="Typo.h4" Style="@("background-color:" + color)">@oscCol.Text</MudText>
                        }
                        else if(oscCol.DefaultValue is not null)
                        {
                            <MudButton Size="Size.Large" Variant="Variant.Filled" Class="py-8" 
                            Style="@("width:100%; height:100%; background-color:" + color)"
                                       OnClick="() => ValueChanged(oscCol, oscCol.DefaultValue)">@oscCol.Text</MudButton>
                        }
                        else 
                            {
                            <MudButton Size="Size.Large" Variant="Variant.Filled" Class="py-8"
                                       Style="@("width:100%; height:100%; background-color:" + color)"
                                       OnClick="() => ValueChanged(oscCol, oscCol.StringValue ?? null)">@oscCol.Text</MudButton>
                            }
                    </MudItem>

                }
            </MudGrid>
        }
    }
</MudContainer>


@code {
    [Parameter]
    public string Name { set; get; } = default!;


    private Models.OSCControl? _oSCControlSettings = null;


    protected override async Task OnParametersSetAsync()
    {
        var settings = await IOscService.GetSettings();

        _oSCControlSettings = settings.Controls.Single(x => x.Name.Equals(System.Web.HttpUtility.UrlEncode(Name)));
        await base.OnParametersSetAsync();
    }



    private async Task ValueChanged(Models.OSCControlElement oSCControlElement, object? value)
    {
        if (_oSCControlSettings is null)
            return;


        var msg = new Models.OSCMessage()
            {
                Server = oSCControlElement.Server ?? _oSCControlSettings.Server,
                ServerPort = oSCControlElement.ServerPort ?? _oSCControlSettings.ServerPort,
                Address = oSCControlElement.OSCAddress,
            };

        if(value is float)
        {
            oSCControlElement.DefaultValue = (float)value;
            msg.Value = value;
            msg.ValueType = typeof(float).Name;
        }
        else if (value is string)
        {
            msg.Value = value;
            msg.ValueType = typeof(string).Name;
        }


        var result = await HttpClient.PostAsJsonAsync("/api/osc", msg);

        if (!result.IsSuccessStatusCode)
            Snackbar.Add("Server-Fehler: " +result.StatusCode, Severity.Error, settings =>
            {
                settings.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            });


    }

    

}
